package com.gut.core.adb;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class UiDumpReader {

	private File fileUiDump;

	public UiDumpReader(File fileUiDump) {
		this.fileUiDump = fileUiDump;
	}

	private Node mRootNode;

	public void read() {
		mRootNode = null;

		SAXParserFactory factory = SAXParserFactory.newInstance();
		SAXParser parser = null;
		try {
			parser = factory.newSAXParser();
		} catch (Exception e) { e.printStackTrace(); } 

		DefaultHandler handler = new DefaultHandler() {
			Node mParentNode;
			Node mWorkingNode;

			@Override
			public void startElement(String uri, String localName,
					String qName, Attributes attributes) throws SAXException {
				boolean nodeCreated = false;
				// starting an element implies that the element that has not yet
				// been closed
				// will be the parent of the element that is being started here
				mParentNode = mWorkingNode;
				if ("hierarchy".equals(qName)) {
					mWorkingNode = new RootWindowNode(
							attributes.getValue("windowName"));
					nodeCreated = true;
				} else if ("node".equals(qName)) {
					UiNode tmpNode = new UiNode();
					for (int i = 0; i < attributes.getLength(); i++) {
						tmpNode.addAtrribute(attributes.getQName(i),
								attributes.getValue(i));
					}
					mWorkingNode = tmpNode;
					nodeCreated = true;
				}
				// nodeCreated will be false if the element started is neither
				// "hierarchy" nor "node"
				if (nodeCreated) {
					if (mRootNode == null) {
						// this will only happen once
						mRootNode = mWorkingNode;
					}
					if (mParentNode != null) {
						mParentNode.addChild(mWorkingNode);
					}
				}
			}

			@Override
			public void endElement(String uri, String localName, String qName)
					throws SAXException {
				// mParentNode should never be null here in a well formed XML
				if (mParentNode != null) {
					// closing an element implies that we are back to working on
					// the parent node of the element just closed, i.e. continue
					// to
					// parse more child nodes
					mWorkingNode = mParentNode;
					mParentNode = mParentNode.getParent();
				}
			}
		};
		try {
			parser.parse(fileUiDump, handler);
		} catch (Exception e) { e.printStackTrace(); }
	}

}
