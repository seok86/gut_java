package com.gut.ui.editors;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.draw2d.ButtonGroup;
import org.eclipse.draw2d.ButtonModel;
import org.eclipse.draw2d.ChangeEvent;
import org.eclipse.draw2d.ChangeListener;
import org.eclipse.draw2d.CheckBox;
import org.eclipse.draw2d.Clickable;
import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.LightweightSystem;
import org.eclipse.draw2d.ToggleModel;
import org.eclipse.draw2d.XYLayout;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorSite;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.part.EditorPart;
import org.eclipse.ui.part.FileEditorInput;
import org.eclipse.zest.core.viewers.GraphViewer;
import org.eclipse.zest.layouts.algorithms.SpringLayoutAlgorithm;

import common.ui.cache.ColorCache;

public class TestFileEditor extends EditorPart {
	
	private FileEditorInput input;

	public TestFileEditor() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public void doSave(IProgressMonitor monitor) {
		// TODO Auto-generated method stub

	}
	@Override
	public boolean isSaveAsAllowed() { return false; }
	@Override
	public void doSaveAs() { }

	@Override
	public void init(IEditorSite site, IEditorInput input) throws PartInitException {
		System.out.println("init");
		if (!(input instanceof FileEditorInput)) { throw new RuntimeException("Wrong input"); }

		this.input = (FileEditorInput) input;
		setSite(site);
		setInput(input);
		//todo = TaskService.getInstance().getTaskById(this.input.getId());
		setPartName(input.getName());
	}

	@Override
	public boolean isDirty() {
		System.out.println("isDirty");
		return false;
	}

	private GraphViewer viewer;
	
	@Override
	public void createPartControl(Composite parent) {
		System.out.println("createPartControl");
		
		parent.setLayout(new GridLayout(2, false));
		parent.setBackground(ColorCache.get(ColorCache.blue, 5));
		
		
		ScrolledComposite scList = new ScrolledComposite(parent, SWT.V_SCROLL);
		GridData gd = new GridData(SWT.FILL, SWT.FILL, false, true); gd.widthHint = 200;
		scList.setLayoutData(gd);
		
		scList.setBackground(ColorCache.white);
		
		Canvas canvas = new Canvas(scList, SWT.BORDER);
		scList.setContent(canvas);
		scList.setExpandVertical(true);
		scList.setExpandHorizontal(true);
		
		createList(canvas);
		
		
		viewer = new GraphViewer(parent, SWT.NONE);
		viewer.getControl().setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		viewer.setContentProvider(new ContentProviderImpl());
		viewer.setLabelProvider(new LabelProviderImpl());
		viewer.setLayoutAlgorithm(new SpringLayoutAlgorithm(), true);
		viewer.setInput(new Object());
		
		
		
		
		/*final Graph graph = new Graph(parent, SWT.NONE);
		graph.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		
		GraphNode root = new GraphNode(graph, SWT.NONE, null, ImageCache.get("new_project.png"));
		GraphNode[] lv1 = new GraphNode[3];
		for (int i = 0; i < 3; i++) {
			GraphNode n = new GraphNode(graph, SWT.NONE, "1 - " + i);
			for (int j = 0; j < 3; j++) {
				GraphNode n2 = new GraphNode(graph, SWT.NONE, "2 - " + j);
				new GraphConnection(graph, SWT.NONE, n, n2);
			}
			new GraphConnection(graph, SWT.NONE, root, n);
			lv1[i] = n;
		}
		
		//new GraphConnection(g, SWT.NONE, lv1[0], lv1[1]);
		//new GraphConnection(g, SWT.NONE, lv1[0], lv1[2]);

		TreeLayoutAlgorithm layoutAlgo = new TreeLayoutAlgorithm(LayoutStyles.NO_LAYOUT_NODE_RESIZING);

		ConstraintAdapter constraintAdapters = new ConstraintAdapter() {

			public void populateConstraint(Object object, LayoutConstraint constraint) {
				if (constraint instanceof BasicEdgeConstraints) {
					BasicEdgeConstraints basicEdgeConstraints = (BasicEdgeConstraints) constraint;
					GraphConnection connection = (GraphConnection) object;
					if (connection.getSource().getText().equals("Root")) {
						basicEdgeConstraints.weight = 1;
					}
					else {
						basicEdgeConstraints.weight = -1;
					}
				}

			}
		};
		
		//graph.setNodeStyle(ZestStyles.NODES_FISHEYE);
		//graph.setNodeStyle(ZestStyles.);

		graph.addConstraintAdapter(constraintAdapters);
		graph.setLayoutAlgorithm(layoutAlgo, true);
		
		
		//System.out.println(root.getSize());*/
	}
	
	protected void createList(Canvas canvas) {
		Label label = new Label("Press a button!");
		
		LightweightSystem lws = new LightweightSystem(canvas);
		Figure parent = new Figure();
		parent.setLayoutManager(new XYLayout());
		lws.setContents(parent);

		Clickable above = new CheckBox("I'm above!");
		parent.add(above, new Rectangle(10, 10, 80, 20));
		ButtonModel aModel = new ToggleModel();
		aModel.addChangeListener(new ChangeListener() {
			public void handleStateChanged(ChangeEvent e) {
				label.setText("Above");
			}
		});
		above.setModel(aModel);

		Clickable below = new CheckBox("I'm below!");
		parent.add(below, new Rectangle(10, 40, 80, 20));
		ButtonModel bModel = new ToggleModel();
		bModel.addChangeListener(new ChangeListener() {
			public void handleStateChanged(ChangeEvent e) {
				label.setText("Below");
			}
		});
		below.setModel(bModel);

		ButtonGroup bGroup = new ButtonGroup();
		bGroup.add(aModel);
		bGroup.add(bModel);
		bGroup.setDefault(bModel);

		parent.add(label, new Rectangle(10, 70, 80, 20));
	}

	@Override
	public void setFocus() {
		System.out.println("setFocus");
	}

}
